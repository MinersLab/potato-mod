@file:Suppress("UnstableApiUsage", "UnstableApiUsage")

import java.text.DateFormat
import java.text.SimpleDateFormat
import java.util.*

plugins {
    id("idea")
    id("maven-publish")
    id("net.neoforged.moddev") version "1.0.11"
    kotlin("jvm") version "2.0.21"
    kotlin("plugin.serialization") version "2.0.21"
}

version = property("mod_version").toString()
group = property("mod_group_id").toString()

base {
    archivesName.set(property("mod_id").toString())
}

java.toolchain.languageVersion.set(JavaLanguageVersion.of(17))

neoForge {
    version = property("neoforge_version").toString()

    parchment {
        mappingsVersion = property("parchment_version").toString()
        minecraftVersion = property("minecraft_version").toString()
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty("forge.logging.markers", "REGISTRIES")

            // Recommended logging level for the console
            logLevel = org.slf4j.event.Level.DEBUG
        }

        create("client") {
            client()
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty("neoforge.enabledGameTestNamespaces", property("mod_id").toString())
        }

        create("server") {
            server()
            programArgument("--nogui")
            systemProperty("neoforge.enabledGameTestNamespaces", property("mod_id").toString())
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        create("gameTestServer") {
            type = "gameTestServer"
            systemProperty("neoforge.enabledGameTestNamespaces", property("mod_id").toString())
        }

        create("data") {
            data()
            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll("--mod", property("mod_id").toString(), "--all", "--output", file("src/generated/resources/").absolutePath, "--existing", file("src/main/resources/").absolutePath)
        }
    }

    mods {
        create(property("mod_id").toString()) {
            sourceSet(sourceSets.main.get())
        }
    }
}

// Include resources generated by data generators.
sourceSets {
    main {
        resources {
            srcDirs("src/generated/resources/")
        }
    }
}



// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
val generateModMetadata = tasks.register<ProcessResources>("generateModMetadata") {
    val replaceProperties = mutableMapOf(
        "minecraft_version" to project.property("minecraft_version"),
        "minecraft_version_range" to project.property("minecraft_version_range"),
        "neoforge_version" to project.property("neoforge_version"),
        "neoforge_version_range" to project.property("neoforge_version_range"),
        "mod_id" to project.property("mod_id"),
        "mod_name" to project.property("mod_name"),
        "mod_license" to project.property("mod_license"),
        "mod_version" to project.property("mod_version"),
        "mod_authors" to project.property("mod_authors"),
        "mod_description" to project.property("mod_description"),
        "kff_version" to project.property("kff_version"),
        "kff_version_range" to project.property("kff_version_range")
    )
    inputs.properties(replaceProperties)
    expand(replaceProperties)
    from("src/main/templates")
    into("build/generated/sources/modMetadata")
}

sourceSets.main.get().resources.srcDir(generateModMetadata)

tasks.withType<Jar> {
    manifest {
        attributes(
            mapOf(
                "Specification-Title" to project.property("mod_id"),
                "Specification-Vendor" to project.property("mod_authors"),
                "Specification-Version" to "1", // We are version 1 of ourselves
                "Implementation-Title" to project.name,
                "Implementation-Version" to project.version,
                "Implementation-Vendor" to project.property("mod_authors"),
                "Implementation-Timestamp" to (SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ") as DateFormat).format(Date())
            )
        )
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register<MavenPublication>("mavenJava") {
            from(components.named("java").get())
        }
    }
    repositories {
        maven {
            url = uri("file://${project.projectDir}/repo")
        }
    }
}

tasks.withType<JavaCompile>().configureEach {
    options.encoding = "UTF-8" // Use the UTF-8 charset for Java compilation
}

// Kotlin for Forge targets Java 17; your mod should do the same
kotlin {
    jvmToolchain(21)
}


// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        isDownloadSources = true
        isDownloadJavadoc = true
    }
}

repositories {
    // NeoForged MDK includes mavenLocal by default
    mavenLocal()
    // REQUIRED for using Kotlin for Forge
    maven {
        name = "Kotlin for Forge"
        url = uri("https://thedarkcolour.github.io/KotlinForForge/")
        content { includeGroup("thedarkcolour") }
    }

    maven { // Registrate
        url = uri("https://maven.tterrag.com/")
        content {
            includeGroup("com.tterrag.registrate")
        }
    }

    maven { // Registrate Fork
        url = uri("https://maven.ithundxr.dev/snapshots")
    }

    maven {
        url = uri("https://cursemaven.com")
    }

    maven { // EnderIO
        url = uri("https://maven.rover656.dev/releases")
    }

}

dependencies {
    implementation("thedarkcolour:kotlinforforge-neoforge:${property("kff_version")}")
    api("com.tterrag.registrate:Registrate:MC1.21-1.3.0+53")
    jarJar("com.tterrag.registrate:Registrate:MC1.21-1.3.0+53")
    // Compat
    api("com.enderio:enderio-base:7.0.0-alpha")
    runtimeOnly("curse.maven:ender-io-64578:5720393")
    // Dev
    runtimeOnly("curse.maven:emi-580555:5619579")
}
